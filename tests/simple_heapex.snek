(fun (ex1)
    ( let ( (x (vec 1 2)) ) (vec-get x 1) )
)

(fun (func1 v)
    ( block
        (print v)
        (print (vec-get v 2))
        (vec (vec-get v 1) (vec-get v 1)(vec-get v 1))
    )
)

(fun (ex2)
    (func1 (vec 1 2 3))
)

(fun (mkpair x y)
    (vec x y)
)

(fun (pairsums lst sze) 
    (let ((i 0) (acc (vec 0 0)))
        (loop
            (block
                (if (= i sze) (break acc) (+ i 0))
                (set! acc (vec 
                            (+ (vec-get acc 0) (vec-get (vec-get lst i) 0))
                            (+ (vec-get acc 1) (vec-get (vec-get lst i) 1))
                          )
                )
                (set! i (add1 i))
            )
        )
    )
)

(fun (ex3)
    (pairsums (vec (mkpair 1 2) (mkpair 1 2) (mkpair 2 1) (mkpair 4 4) (mkpair -1 -3)) 5)
)

(if (= input 1)
    (ex1)
    (if (= input 2)
        (ex2)
        (ex3)
    )
)